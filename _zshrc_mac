# ———————————————————————————————
# ターミナルのエンコード
# ———————————————————————————————
case $TERM in
    linux) LANG=C ;;
    *) LANG=ja_JP.UTF-8 ;;
esac

# ———————————————————————————————
# emacs 風キーバインド
# ———————————————————————————————
bindkey -e

# ———————————————————————————————
# プロンプト
# ———————————————————————————————
autoload -Uz compinit && compinit
autoload -Uz vcs_info
setopt prompt_subst

zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' unstagedstr '!'
zstyle ':vcs_info:git:*' stagedstr '+'
zstyle ':vcs_info:*' formats ' %c%u(%s:%b)'
zstyle ':vcs_info:*' actionformats ' %c%u(%s:%b|%a)'

precmd () {
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

PROMPT="%B%F{green}❯❯%1(v|%1v|)%f%b %B%F{blue}%~%f%b %* %D{%Y/%m/%d}
%B%F{green}❯%f%b "

# ———————————————————————————————
# 言語設定
# ———————————————————————————————
export LANG=ja_JP.UTF-8
# export LANG=en_US

# ———————————————————————————————
# 補完
# ———————————————————————————————
autoload -Uz compinit
compinit

## 補完侯補をハイライトして、メニューから選択
### select=2: 補完候補を一覧から選択 ただし、補完候補が2つ以上なければすぐに補完
zstyle ':completion:*:default' menu select=2

## 補完候補に色を付ける
### "": 空文字列はデフォルト値を使うという意味
zstyle ':completion:*:default' list-colors ""

# 色を使用出来るようにする
autoload -Uz colors
colors

# 補完関数の表示を強化する
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT
zstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT
zstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:descriptions' format '%F{yellow}Completing %B%d%b%f'$DEFAULT

# マッチ種別を別々に表示
zstyle ':completion:*' group-name ''

# ———————————————————————————————
# エイリアス
# ———————————————————————————————
# linux
#alias la='ls -la --color'
#alias ll='ls -l --color'
alias la='ls -la -G'
alias ll='ls -l -G'
alias back='cd $OLDPWD'
alias home='cd $HOME'
alias ipv4='ifconfig | grep inet\ '
alias ipv6='ifconfig | grep inet6'
alias fgrep='find app --type f | xargs grep '

# docker
alias dup='docker-compose up'
alias ddown='docker-compose down'
alias dr='docker-compose run --rm'
alias dd='docker ps -aq -f "status=exited" | xargs docker rm -v && docker images -q -f "dangling=true" | xargs docker rmi && docker volume ls -qf dangling=true | xargs docker volume rm'

# Tsukulink
alias td='docker compose -f compose.dev.yml'
alias td-run='docker compose -f compose.dev.yml run --rm app '

# vim
alias ctags="`brew --prefix`/bin/ctags"

# git
alias gl='git log --all --oneline --graph'
alias gs='git commit -am '
alias gc='git checkout '
alias gr='git fetch && git pull '

# rails
alias rspec='bundle exec rspec '
alias rails='bundle exec rails '
alias rid_db_reset='bundle exec rails db:drop && bundle exec rails db:create && bundle exec ridgepole -c ./config/database.yml --apply -f ./db/schemafile.rb && bundle exec ridgepole -c ./config/database.yml --apply -f ./db/schemafile.rb --env test && bundle exec rails db:seed'

# Python
export PATH="/usr/local/opt/python/libexec/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"

# Rust
$HOME/.cargo/env

## SDL2 link
export LIBRARY_PATH="$LIBRARY_PATH:$(brew --prefix)/lib"

# Hardware simulator
alias simulator="sh /Users/tnishimura/tools/nand2tetris/tools/HardwareSimulator.sh"

# ———————————————————————————————
# redis-server起動
# ———————————————————————————————
#brew services start redis

# ———————————————————————————————
# opensslパス指定
# ———————————————————————————————
export PATH="/opt/homebrew/opt/openssl@3/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"

# ———————————————————————————————
# LoopBackパス指定
# ———————————————————————————————
export PATH=/usr/local/lib/node_modules/node/bin/lb:$PATH

# ———————————————————————————————
# nvmパス指定
# ———————————————————————————————
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# ———————————————————————————————
# npmパス指定
# ———————————————————————————————
export PATH=~/.npm-global/bin:$PATH

# ———————————————————————————————
# shパス指定
# ———————————————————————————————
export PATH="$HOME/dotfiles/shfiles:$PATH"

# ———————————————————————————————
# android-sdkパス指定
# ———————————————————————————————
export PATH="/Users/tetsu/Library/Android/sdk/platform-tools/:$PATH"

# ———————————————————————————————
# PostgreSQL
# ———————————————————————————————
export PATH=/usr/local/Cellar/postgresql/12.3_1/bin:$PATH

# ———————————————————————————————
# MySQL
# ———————————————————————————————

#export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"
#export LDFLAGS="-L/usr/local/opt/openssl/lib"
#export CPPFLAGS="-I/usr/local/opt/openssl/include"

#export PATH="/usr/local/opt/mysql@5.5/bin:$PATH"
#export LDFLAGS="-L/usr/local/opt/mysql@5.5/lib"
#export CPPFLAGS="-I/usr/local/opt/mysql@5.5/include"

export PATH="/usr/local/opt/mysql-client/bin:$PATH"
export PATH="/usr/local/opt/mysql-client/lib:$PATH"
export PATH="/opt/homebrew/opt/mysql-client/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"

# ———————————————————————————————
# mysql起動
# brew services restart mysql@5.5
# mysql.server start
alias mysqlbk='mysqldump -u root -p -x --all-databases >'
alias mysqlre='mysql -u root -p < '

# ———————————————————————————————
# node brewパス指定
# ———————————————————————————————
export PATH=$HOME/.nodebrew/current/bin:$PATH

# ———————————————————————————————
# ruby パス指定
# ———————————————————————————————
#export PATH="~/.rbenv/shims:$PATH"
#
#別プロセスを立ち上げるときのエラー対策
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# rubocop daemon
export PATH="/usr/local/bin/rubocop-daemon-wrapper:$PATH"

# ———————————————————————————————
# rbenv 設定
# ———————————————————————————————
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init - zsh)"

# ———————————————————————————————
# RUST パス指定
# ———————————————————————————————
export PATH="$HOME/.cargo/bin:$PATH"

# ———————————————————————————————
# FLUTTER パス指定
# ———————————————————————————————
export PATH="$HOME/flutter/bin:$PATH"

# ———————————————————————————————
# hping3設定
# ———————————————————————————————
export PATH="/usr/local/sbin:$PATH"

# ———————————————————————————————
# tmux起動
# ———————————————————————————————
# if [ "$TMUX" = "" ]; then tmux -u; fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/tnishimura/bin/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/tnishimura/bin/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/tnishimura/bin/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/tnishimura/bin/google-cloud-sdk/completion.zsh.inc'; fi

# Added by Amplify CLI binary installer
export PATH="$HOME/.amplify/bin:$PATH"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/tnishimura/anaconda3/navigator/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/tnishimura/anaconda3/navigator/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/tnishimura/anaconda3/navigator/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/tnishimura/anaconda3/navigator/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

